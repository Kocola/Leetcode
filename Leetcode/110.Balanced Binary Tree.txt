1.时间：O（N）；空间：O（N）	->递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	bool isBalanced(TreeNode* root) {
		if (root == nullptr) return true;
		if (isBalanced(root->left) && isBalanced(root->right)){
			int diff = calcHeight(root->left) - calcHeight(root->right);
			if (std::abs(diff) <= 1) return true;
		}
		return false;
	}
private:
	int calcHeight(TreeNode* root){
		if (root == nullptr) return 0;
		return std::max(calcHeight(root->left), calcHeight(root->right)) + 1;
	}
};
2.时间：O（N）；空间：O（N）	->计算高度相对1高效
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	bool isBalanced(TreeNode* root) {
		return !(balancedHeight(root) < 0);
	}
private:
	int balancedHeight(TreeNode* root){
		if (root == nullptr) return 0;
		int leftH = balancedHeight(root->left);
		int rightH = balancedHeight(root->right);
		if (leftH < 0 || rightH < 0 || std::abs(leftH - rightH) > 1) return -1;
		return std::max(leftH, rightH) + 1;
	}
};