1.时间：O（）;空间：O（N）		-->超时
class Solution {
public:
	int combinationSum4(vector<int>& nums, int target) {
		if (target < 1 || nums.empty()) return 0;
		std::sort(nums.begin(), nums.end());
		return dfs(nums, target);
	}
private:
	int dfs(const std::vector<int>& nums, int target){
		if (target == 0) return 1;
		int count = 0;
		for (int i = 0; i < nums.size(); ++i){
			if (target < nums[i]) break;
			count += dfs(nums, target - nums[i]);
		}
		return count;
	}
};

2.时间：O（max（target*N, NLOGN））；空间：O（N）
/*	背包问题：dp[i] = sum(dp[i-nums[k]])，i >= nums[k] 
 */
class Solution {
public:
	int combinationSum4(vector<int>& nums, int target) {
		if (target < 1 || nums.empty()) return 0;
		std::sort(nums.begin(), nums.end());
		std::vector<int> dp(target + 1, 0);
		dp[0] = 1;
		for (int i = 1; i <= target; ++i){
			for (int k = 0; k < nums.size() && nums[k] <= i; ++k){
				dp[i] += dp[i - nums[k]];
			}
		}
		return dp[target];
	}
};