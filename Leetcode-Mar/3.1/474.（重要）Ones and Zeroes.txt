1.时间：O（）；空间：O（）
class Solution {
	/* dp[i][j][k] : 选择第i个字符串时，'0'的数目为j，'1'的数目为k时所能构成的字符串的最大数量；
	    dp[i][j][k] = max(dp[i-1][j][k], dp[i-1][j-zeros][k-ones]), 0 <= i < strs.size(), j >= zeros(strs[i]), k >= ones(strs[i]) */
public:
	/* 以下是经过优化的dp，通过滚动数组，将3维dp将为2维dp */
	int findMaxForm(vector<string>& strs, int m, int n) {
		if (strs.empty()) return 0;
		std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));
		for (int i = 0; i < strs.size(); ++i){
			int ones = 0, zeros = 0;
			calcOneAndZero(strs[i], ones, zeros);
			for (int j = m; j >= ones; --j){
				for (int k = n; k >= zeros; --k){
					dp[j][k] = std::max(dp[j][k], dp[j - ones][k - zeros] + 1);
				}
			}
		}
		return dp[m][n];
	}
private:
	void calcOneAndZero(const std::string& str, int& ones, int &zeros){
		for (int i = 0; i < str.size(); ++i){
			str[i] == '0' ? ++ones : ++zeros;
		}
	}
};