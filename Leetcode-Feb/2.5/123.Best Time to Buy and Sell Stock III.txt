1.时间：O（N）；空间：O（N）	->动态规划
/* 将原数组变成差分数组，本题可看做是最大m字段和，m=2 */
class Solution {
public:
	int maxProfit(vector<int>& prices) {
		if (prices.size() <= 1) return 0;
		std::vector<int> ldp(prices.size(), 0);	//ldp[i]表示[0,i](0<=i<=size-1)区间上所获得的最大利润
		int cur_min = prices[0];
		for (int i = 1; i < prices.size(); ++i){
			ldp[i] = std::max(ldp[i - 1], prices[i] - cur_min);
			cur_min = std::min(cur_min, prices[i]);
		}
		std::vector<int> rdp(prices.size(), 0);	//rdp[i]表示[i,size-1]（0<=i<=size-1）区间上所获得的最大利润
		int cur_max = prices[prices.size() - 1];
		for (int i = prices.size() - 2; i >= 0; --i){
			cur_max = std::max(cur_max, prices[i]);
			rdp[i] = std::max(rdp[i + 1], cur_max - prices[i]);
		}
		/* 最大利润为max(ldp[i]+rdp[i])，（0<=i<=size-1） */
		int result = 0;
		for (int i = 0; i < prices.size(); ++i){
			result = std::max(result, ldp[i] + rdp[i]);
		}
		return result;
	}
};