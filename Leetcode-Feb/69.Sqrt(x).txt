1.时间：O（LOGN）；空间：O（1）
class Solution {
public:
	int mySqrt(int x) {
		if (x < 0) return -1;
		if (x == 1) return 1;
		int lower = 0, upper = x;
		while (lower + 1 < upper){
			int mid = lower + ((upper-lower) >> 1);
			if (x / mid > mid) lower = mid;	//使用mid*mid会溢出
			else if (x / mid < mid) upper = mid;
			else return mid;
		}
		return lower;
	}
};
2.时间：O（LOGN）；空间：O（1）
class Solution {
public:
	int mySqrt(int x) {
		if (x < 2) return x;
		int lower = 1, upper = x >> 1;
		int lastMid = lower;
		while (lower <= upper){
			int mid = lower + (upper - lower >> 1);
			int div = x / mid;
			if (mid < div){
				lastMid = mid;
				lower = mid + 1;
			}else if (mid > div){
				upper = mid - 1;
			}else  return mid;
		}
		return lastMid;
	}
};