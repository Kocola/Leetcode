1.时间：O（N^2）;空间：O（N）	->利用57.Insert Interval
class Solution {
public:
	vector<Interval> merge(vector<Interval>& intervals) {
		if (intervals.empty()) return std::vector<Interval>();
		std::vector<Interval> result;
		for (auto it : intervals){
			result = insert(result, it);
		}
		return result;
	}
private:
	std::vector<Interval> insert(std::vector<Interval>& intervals, Interval newInterval){
		if (intervals.empty()) return std::vector<Interval>{newInterval};
		std::vector<Interval> result;
		std::vector<Interval>::iterator it = intervals.begin();
		while (it != intervals.end()){
			if (it->end < newInterval.start){
				result.push_back(*it);
			} else if (it->start > newInterval.end){
				break;
			} else{
				newInterval.start = std::min(newInterval.start, it->start);
				newInterval.end = std::max(newInterval.end, it->end);
			}
			it++;
		}
		result.push_back(newInterval);
		while (it != intervals.end()){
			result.push_back(*it++);
		}
		return result;
	}
};
2.时间：O（N）；空间：O（N）	->扫描一遍
class Solution {
	/* 输入数据非有序 */
public:
	vector<Interval> merge(vector<Interval>& intervals) {
		if (intervals.empty()) return std::vector<Interval>();

		/* 排序，使数据有序 */
		std::sort(intervals.begin(), intervals.end(), [](const Interval& a, const Interval& b) -> bool {
			if (a.start != b.start) return a.start < b.start;
			return a.end < b.end;
		});

		std::vector<Interval> result;
		Interval interval = *intervals.begin();
		for (auto it = std::next(intervals.begin()); it != intervals.end(); ++it){
			if (interval.end < it->start){
				result.push_back(interval);
				interval = *it;
			}
			else if (interval.end >= it->start && interval.start <= it->start){
				interval.start = std::min(interval.start, it->start);
				interval.end = std::max(interval.end, it->end);
			}
		}
		result.push_back(interval);
		return result;
	}
};