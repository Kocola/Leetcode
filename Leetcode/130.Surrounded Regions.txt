1.时间：O（N^2）;空间：O（1）	->广度优先搜索
class Solution {
	typedef std::pair<int, int> state;
public:
	void solve(vector<vector<char>>& board) {
		if (board.size() == 0 || board.front().size() == 0) return;
		const int rows = board.size();
		const int cols = board.front().size();
		for (int i = 0; i < rows; ++i){
			bfs(board, i, 0);
			bfs(board, i, cols - 1);
		}
		for (int i = 1; i < cols - 1; ++i){
			bfs(board, 0, i);
			bfs(board, rows - 1, i);
		}
		for (int i = 0; i < rows; ++i){
			for (int k = 0; k < cols; ++k){
				if (board[i][k] == '+') board[i][k] = 'O';
				else if (board[i][k] == 'O') board[i][k] = 'X';
			}
		}
	}
private:
	bool isvalid(const std::vector<std::vector<char>>& board, int x, int y){
		const int rows = board.size();
		const int cols = board.front().size();
		if (x < 0 || x >= rows || y < 0 || y >= cols || board[x][y] != 'O')
			return false;
		return true;
	}
	std::vector<state> extend(std::vector<std::vector<char>>& board, int x, int y){
		std::vector<state> result;
		const state direction[4] = { { x - 1, y }, { x + 1, y }, { x, y - 1 }, { x, y + 1 } };
		for (int i = 0; i < 4; ++i){
			if (isvalid(board, direction[i].first, direction[i].second)){
				/* 标记和去重 */
				board[direction[i].first][direction[i].second] = '+';
				result.push_back(direction[i]);
			}
		}
		return result;
	}
	void bfs(std::vector<std::vector<char>>& board, int x, int y){
		std::queue<state> queue;
		if (isvalid(board, x, y)){
			board[x][y] = '+';	//这行不能忘记
			queue.push(state(x, y));
		}
		while (!queue.empty()){
			auto cur = queue.front();
			queue.pop();
			auto entends = extend(board, cur.first, cur.second);
			for (auto ex : entends) queue.push(ex);
		}
	}
};