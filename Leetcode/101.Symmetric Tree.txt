1.时间：O（N）；空间：O（N）	->递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	bool isSymmetric(TreeNode* root) {
		if (root == nullptr) return true;
		if (root->left == nullptr && root->right == nullptr) return true;
		if (root->left == nullptr || root->right == nullptr) return false;
		return isSymmetric(root->left, root->right);
	}
private:
	bool isSymmetric(TreeNode* p, TreeNode* q){
		if (p == nullptr && q == nullptr) return true;
		if (p == nullptr || q == nullptr) return false;
		if (p->val != q->val) return false;
		return isSymmetric(p->left, q->right) && isSymmetric(p->right, q->left);
	}
};
2.时间：O（N）；空间：O（N）	->迭代
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	bool isSymmetric(TreeNode* root) {
		if (root == nullptr) return true;
		std::stack<TreeNode*> stk;
		stk.push(root->left);
		stk.push(root->right);
		while (!stk.empty()){
			auto p = stk.top();
			stk.pop();
			auto q = stk.top();
			stk.pop();
			if (p == nullptr && q == nullptr) continue;
			if (p == nullptr || q == nullptr) return false;
			if (p->val != q->val) return false;

			stk.push(p->left);
			stk.push(q->right);
			stk.push(p->right);
			stk.push(q->left);
		}
		return true;
	}
};
