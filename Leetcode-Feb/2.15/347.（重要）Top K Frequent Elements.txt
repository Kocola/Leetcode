1.Ê±¼ä£ºO£¨KLOGN£©£»¿Õ¼ä£ºO£¨N£©
class Solution {
public:
	vector<int> topKFrequent(vector<int>& nums, int k) {
		if (k <= 0) return std::vector<int>();
		std::unordered_map<int, int> hashTable;
		for (int i = 0; i < nums.size(); ++i){
			if (hashTable.find(nums[i]) != hashTable.end()){
				hashTable[nums[i]]++;
			} else{
				hashTable[nums[i]]++;
			}
		}
		std::priority_queue<std::pair<int, int>> queue;
		for (auto it : hashTable){
			queue.push(std::pair<int, int>(it.second, it.first));
		}
		std::vector<int> result;
		for (int i = 0; i < k; ++i){
			int num = queue.top().second;
			queue.pop();
			result.push_back(num);
		}
		return result;
	}
};