1.时间：O（N^2）;空间：O（N）	->动态规划，错误（数据示例：["aabc"，"abad"，"aabadabc"]）
class Solution {
public:
	bool isInterleave(string s1, string s2, string s3) {
		if (s1.size() + s2.size() != s3.size()) return false;
		std::vector<bool> dp(s1.size() + s2.size() + 1, false);
		dp[s1.size() + s2.size()] = true;
		int s3_index = s1.size() + s2.size() - 1;
		int s1_index = s1.size() - 1, s2_index = s2.size() - 1;
		while (s1_index >= 0 && s2_index >= 0){
			if (dp[s3_index + 1]){
				if (s3[s3_index] == s1[s1_index]){
					s1_index--;
				}else if(s3[s3_index] == s2[s2_index]){
					s2_index--;
				}else{
					return false;
				}
				dp[s3_index--] = true;
			}else{
				return false;
			}
		}
		while (s1_index >= 0){
			if (s3[s3_index--] != s1[s1_index--]) return false;
		}
		while (s2_index >= 0){
			if (s3[s3_index--] != s2[s2_index--]) return false;
		}
		return true;
	}
};
2.时间：O（N^2）;空间：O（N^2）	->动态规划
class Solution {
public:
	/* 设状态f[i][j]，表示s1[0][i]和s2[0][j]，匹配s3[0, i+j]；如果s1的最后一个字符等于
		s3的最后一个字符，则f[i][j] = f[i-1][j]；如果s2的最后一个字符等于s3的最后一个
		字符，则f[i][j] = f[i][j-1].因此状态转移方程如下:
		f[i][j] = （s1[i-1] == s3[i+j-1] && f[i-1][j]）
			|| （s2[j - 1] == s3[i + j - 1] && f[i][j-1]）
	*/
	bool isInterleave(string s1, string s2, string s3) {
		if (s1.size() + s2.size() != s3.size()) return false;
		std::vector<std::vector<bool>> dp(s1.size() + 1, std::vector<bool>(s2.size() + 1, true));
		/* 初始化第0行 */
		for (int i = 1; i <= s1.size(); ++i){
			dp[i][0] = dp[i-1][0] && s1[i - 1] == s3[i - 1];
		}
		/* 初试化第0列 */
		for (int i = 1; i <= s2.size(); ++i){
			dp[0][i] = dp[0][i-1] && s2[i-1] == s3[i-1];
		}
		for (int i = 1; i <= s1.size(); ++i){
			for (int k = 1; k <= s2.size(); ++k){
				dp[i][k] = (s1[i - 1] == s3[i + k - 1] && dp[i - 1][k])
					|| (s2[k - 1] == s3[i + k - 1] && dp[i][k - 1]);
			}
		}
		return dp[s1.size()][s2.size()];
	}
};