1.时间：O（N！）；空间：O（N）
class Solution {
public:
	vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
		if (candidates.size() == 0) return std::vector<std::vector<int>>();
		std::sort(candidates.begin(), candidates.end());
		std::vector<std::vector<int>> result;
		std::vector<int> path;
		dfs(candidates, target, 0, path, result);
		return result;
	}
	void dfs(const std::vector<int>& candidates, int gap, int start, std::vector<int>& path,
		std::vector<std::vector<int>>& result){
		const int size = candidates.size();
		if (gap == 0){
			result.push_back(path);
			return;
		}
		int previous = -1;
		for (int i = start; i < size; ++i){
			if (candidates[i] == previous) continue;	//去重，确保本次循环candidate[i]最多使用一次
			if (gap < candidates[i]) return;	//剪枝
			previous = candidates[i];
			path.push_back(candidates[i]);
			dfs(candidates, gap - candidates[i], i + 1, path, result);
			path.pop_back();
		}
	}
};