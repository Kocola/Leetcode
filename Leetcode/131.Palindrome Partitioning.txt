1.时间：O（2^N）;空间：O（N）	->深度优先搜索
class Solution {
public:
	vector<vector<string>> partition(string s) {
		if (s.size() == 0) return std::vector<std::vector<std::string>>();
		std::vector<std::vector<std::string>> result;
		std::vector<std::string> path;
		dfs(s, 0, 1, path, result);
		return result;
	}
private:
	/* [0~prev-1]表示已经处理过，且保证是回文
	[prev, start)表示待处理的字符串 */
	void dfs(const std::string& s, int prev, int start, std::vector<std::string>& path, std::vector<std::vector<std::string>>& result){
		if (start == s.size()){
			if (isPalindrome(s, prev, start - 1)){
				path.push_back(s.substr(prev, start - prev));
				result.push_back(path);
				path.pop_back();
			}
			return;
		}
		/* 不断开 */
		dfs(s, prev, start + 1, path, result);
		/* 断开 */
		if (isPalindrome(s, prev, start - 1)){
			path.push_back(s.substr(prev, start - prev));
			dfs(s, start, start + 1, path, result);
			path.pop_back();
		}
	}
	/* 判断是否是s的[start,end]区间是否是回文 */
	bool isPalindrome(const std::string& s, int start, int end){
		while (start < end && s[start] == s[end]){
			start++;
			end--;
		}
		return start >= end;
	}
};
2.时间：O（2^N）；空间：O（N）	->深度优先搜索
class Solution {
public:
	vector<vector<string>> partition(string s) {
		if (s.size() == 0) return std::vector<std::vector<std::string>>();
		std::vector<std::vector<std::string>> result;
		std::vector<std::string> path;
		dfs(s, 0, path, result);
		return result;
	}
private:
	void dfs(const std::string& s, int start, std::vector<std::string>& path, std::vector<std::vector<std::string>>& result){
		if (start == s.size()){
			result.push_back(path);
			return;
		}
		for (int i = start; i < s.size(); ++i){
			if (isPalindrome(s, start, i)){
				path.push_back(s.substr(start, i - start + 1));
				dfs(s, i + 1, path, result);
				path.pop_back();
			}
		}
	}
	/* 判断是否是s的[start,end]区间是否是回文 */
	bool isPalindrome(const std::string& s, int start, int end){
		while (start < end && s[start] == s[end]){
			start++;
			end--;
		}
		return start >= end;
	}
};
3.时间：O（N^2）;空间：O（）	->动态规划
class Solution {
public:
	vector<vector<string>> partition(string s) {
		if (s.size() == 0) return std::vector<std::vector<std::string>>();
		const int size = s.size();
		std::vector<std::vector<bool>> ispalin(size, std::vector<bool>(size, false));
		/* isplain[i][j]表示s中[i,j]子字符串是否是回文 */
		for (int i = size - 1; i >= 0; --i){
			for (int k = i; k < size; ++k){
				ispalin[i][k] = (s[i] == s[k]) && ((k - i < 2) || ispalin[i + 1][k - 1]);
			}
		}
		std::vector<std::vector<std::vector<std::string>>> subplain(size);
		for (int i = size - 1; i >= 0; --i){
			for (int k = i; k < size; ++k){
				if (ispalin[i][k]){
					const std::string palindrome = s.substr(i, k - i + 1);
					if (k + 1 < size){
						for (auto v : subplain[k + 1]){
							v.insert(v.begin(), palindrome);
							subplain[i].push_back(v);
						}
					}else{
						subplain[i].push_back(std::vector<std::string>{palindrome});
					}
				}
			}
		}
		return subplain[0];
	}
};