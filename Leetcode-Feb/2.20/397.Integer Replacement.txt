1.时间：O（2^N）；空间：O（N）
class Solution {
public:
	int integerReplacement(int n) {
		if (n == 1 || n == 0) return 0;
		if (n == std::numeric_limits<int>::max()){
			return 2 + integerReplacement((n >> 1) + 1);
		}
		if (n % 2 == 0) return integerReplacement(n >> 1) + 1;
		else return std::min(integerReplacement(n - 1), integerReplacement(n + 1)) + 1;
	}
};
2.时间：O（N）；空间：O（N）
class Solution {
public:
	int integerReplacement(int n) {
		if (hashTable.find(n) != hashTable.end()) return hashTable[n];
		if (n == 1 || n == 0) return 0;
		if (n == std::numeric_limits<int>::max()){
			hashTable[n] = 2 + integerReplacement((n >> 1) + 1);
			return hashTable[n];
		}
		if (n % 2 == 0){
			hashTable[n] = integerReplacement(n >> 1) + 1;
			return hashTable[n];
		}
		else{
			hashTable[n] = std::min(integerReplacement(n - 1), integerReplacement(n + 1)) + 1;
			return hashTable[n];
		}
	}
private:
	std::unordered_map<int, int> hashTable;
};
3.时间：O（N）；空间：O（N）	->超内存
class Solution {
public:
	int integerReplacement(int n) {
		if (n == 1 || n == 0) return 0;
		std::vector<int> dp(n+1, 0);
		for (int i = 2; i <= n; ++i){
			if (i % 2 == 0) dp[i] = dp[i >> 1] + 1;
			else{
				if (i == std::numeric_limits<int>::max()) dp[i] = dp[(i >> 1) + 1] + 2;
				else dp[i] = std::min(dp[i - 1], dp[(i + 1) >> 1] + 1) + 1;
			}
		}
		return dp[n];
	}
};
