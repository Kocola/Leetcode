1.时间：O（N）；空间：O（N）	->hash
class Solution {
public:
	int majorityElement(vector<int>& nums) {
		if (nums.empty()) return 0;
		if (nums.size() == 1) return nums[0];

		const int numLimit = nums.size() / 2 + nums.size() % 2;
		std::unordered_map<int, int> hashTable;
		for (int i = 0; i < nums.size(); ++i){
			if (hashTable.find(nums[i]) != hashTable.end()){
				hashTable[nums[i]]++;
				if (hashTable[nums[i]] >= numLimit) return nums[i];
			}else{
				hashTable[nums[i]] = 1;
			}
		}

		return nums.back();
	}
};
2.时间：O（）；空间：O（1）	->超时
class Solution {
public:
	int majorityElement(vector<int>& nums) {
		if (nums.empty()) return 0;
		if (nums.size() == 1) return nums[0];

		const int resultIndex = nums.size() / 2;
		int start = 0, end = nums.size() - 1;

		while (1){
			int pivot = partition(nums, start, end);
			if (pivot == resultIndex) return nums[pivot];
			else if (pivot < resultIndex) start = pivot + 1;
			else end = pivot - 1;
		}

		return nums.back();
	}
private:
	int partition(std::vector<int>& nums, int start, int end){
		if (start >= end) return start;
		int pivot = nums[start];
		while (start < end){
			while (nums[end] > pivot && start < end) --end;
			if (start < end) nums[start++] = nums[end];
			while (nums[start] <= pivot && start < end) ++start;
			if (start < end) nums[end--] = nums[start];
		}
		nums[start] = pivot;
		return start;
	}
};
3.时间：O（N）；空间：O（1）
class Solution {
	/* Moore voting algorithm--每找出两个不同的element，就成对删除即count--，
		最终剩下的一定就是所求的. 时间复杂度：O(n) */
public:
	int majorityElement(vector<int>& nums) {
		if (nums.empty()) return 0;
		if (nums.size() == 1) return nums[0];

		int elem = nums.front();
		int count = 0;
		for (int i = 0; i < nums.size(); ++i){
			if (count == 0){
				elem = nums[i];
				count = 1;
			} else{
				if (elem == nums[i]) count++;
				else count--;
			}
		}
		
		return elem;
	}
};