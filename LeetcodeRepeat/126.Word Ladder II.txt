1.时间：O（N）；空间：O（N）	->广度优先搜索
class Solution {
public:
	vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
		/* 将wordList中的string全部放到hashset中，加快搜索速度 */
		for_each(wordList.begin(), wordList.end(), [&](const std::string& str){
			dict.insert(str);
		});
		bool found = false;
		std::unordered_set<std::string> curLevel, nextLevel;
		curLevel.insert(beginWord);
		while (!curLevel.empty()){
			/* 将同层的string全部置为已访问，避免同层之间相互指向 */
			for (auto curstr : curLevel){
				visited.insert(curstr);
			}
			for (auto curstr : curLevel){
				auto nextstrs = nextAvailablestrs(curstr);
				for (auto nextstr : nextstrs){
					if (nextstr == endWord) found = true;
					nextLevel.insert(nextstr);
					father[nextstr].push_back(curstr);	//用于计算路径
				}
			}
			std::swap(curLevel, nextLevel);
			nextLevel.clear();
		}

		std::vector<std::vector<std::string>> result;
		if (found){
			std::vector<std::string> path;
			calcpath(beginWord, endWord, path, result);
		}
		
		return result;
	}
private:
	std::vector<std::string> nextAvailablestrs(std::string str){
		std::vector<std::string> result;
		for (int i = 0; i < str.size(); ++i){
			for (char ch = 'a'; ch <= 'z'; ++ch){
				if (ch == str[i]) continue;	//避免将自己包含进去
				std::swap(ch, str[i]);
				if (dict.count(str) > 0 && !visited.count(str)){
					result.push_back(str);
				}
				std::swap(ch, str[i]);
			}
		}
		return result;
	}
	void calcpath(const std::string& start, const std::string& word, std::vector<std::string>& path,
		std::vector<std::vector<std::string>>& result){
		path.push_back(word);
		if (word == start){
			result.push_back(path);
			std::reverse(result.back().begin(), result.back().end());	//path内存的是endWord->startWord，因此需reverse一次
		} else{
			for (auto lastWord : father[word]){
				calcpath(start, lastWord, path, result);
			}
		}
		path.pop_back();
	}
private:
	std::unordered_set<std::string> dict;
	std::unordered_set<std::string> visited;
	std::unordered_map<std::string, std::vector<std::string>> father;
};