1.时间：O（k*N）；空间：O（1）	->超时
class Solution {
public:
	void rotate(vector<int>& nums, int k) {
		if (k == 0) return;
		k = k % nums.size();	/* 避免无效的移动 */
		for (int i = 0; i < k; ++i){
			int recordLast = nums.back();
			for (int j = nums.size() - 1; j >= 0; --j){
				nums[j] = nums[j - 1];
			}
			nums.front() = recordLast;
		}
	}
};
2.时间：O（N）；空间：O（N）
class Solution {
public:
	void rotate(vector<int>& nums, int k) {
		if (k == 0) return;
		k = k % nums.size();
		const int size = nums.size();
		std::vector<int> result(size, 0);
		for (int i = 0; i < size; ++i){
			result[(i + k) % size] = nums[i];
		}
		nums = result;
	}
};
3.时间：O（N）；空间：O（1）	->三次reverse
class Solution {
public:
	void rotate(vector<int>& nums, int k) {
		if (k == 0) return;
		k = k % nums.size();
		reverse(nums, 0, nums.size() - k);	/* reverse(nums, 0, k + 1); reverse(nums, k + 1, nums.size());错误：数据例子：[1,2]，1 */
		reverse(nums, nums.size() - k, nums.size());
		reverse(nums, 0, nums.size() - 1);
	}
private:
	void reverse(std::vector<int>& nums, int start, int end){//左闭右开区间
		if (start >= end) return;
		const int size = end - start + 1;
		for (int i = 0; i < size / 2; ++i){
			std::swap(nums[start + i], nums[end - i]);
		}
	}
};