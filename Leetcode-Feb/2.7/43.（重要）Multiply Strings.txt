1.时间：O（M+N）；空间：O（N*M）		->去除先导0
class Solution {
	typedef std::vector<int> BigInt;
public:
	string multiply(string num1, string num2) {
		if (num1.empty() || num2.empty()) return "";
		return to_string(multiply(make_bigint(num1), make_bigint(num2)));
	}
private:
	BigInt make_bigint(const std::string& str){
		BigInt data;
		std::transform(str.rbegin(), str.rend(), std::back_inserter(data), [](char ch){
			return ch - '0';
		});
		return data;
	}
	std::string to_string(const BigInt& data){
		std::string result;
		std::transform(std::find_if(data.rbegin(), data.rend(), [](int num) { return num > 0; }), data.rend(), back_inserter(result), [](int num){
			return num + '0';
		});
		return result == "" ? "0" : result;	//如果返回结果是空，有可能结果是0
	}
	BigInt multiply(const BigInt& lhs, const BigInt& rhs){
		const std::vector<int>& x = lhs;
		const std::vector<int>& y = rhs;
		std::vector<int> result(x.size() + y.size(), 0);
		
		for (int i = 0; i < x.size(); ++i){
			for (int k = 0; k < y.size(); ++k){
				result[i + k] += x[i] * y[k];
				if (result[i + k] >= 10){
					result[i + k + 1] += result[i + k] / 10;
					result[i + k] %= 10;
				}
			}
		}
		return result;
	}
};
2.时间：O（M+N）；空间：O（N*M）		->去除先导0
class BigInt{
	/*	一个数组元素对应9个十进制位，即数组是亿进制的
		因为1^9 * 1^9 没有超过2^63-1
	*/
	typedef long long int64_t;	/* 用long long存放数据,避免溢出 */
public:
	/* 以std::string构造BigInt */
	BigInt(const std::string& str){
		std::vector<int64_t> data;
		data.reserve(str.size() / RADIX_LEN + 1);
		for (int i = str.size(); i > 0; i -= RADIX_LEN){
			int low = std::max(i - RADIX_LEN, 0);
			int tmp = 0;
			for (int k = low; k < i; ++k){
				tmp = tmp * 10 + str[k] - '0';
			}
			data.push_back(tmp);
		}
		/* std::swap异常安全 */
		std::swap(data, elems);
	}
	/* 以BigInt构造std::string，用于返回结果 */
	std::string to_string(){
		std::stringstream result;
		bool started = false;
		for (auto it = elems.rbegin(); it != elems.rend(); ++it){
			if (started){
				result << setw(RADIX_LEN) << setfill('0') << *it;	/* 除开头外的0，需要保留 */
			} else{
				result << *it;
				started = true;
			}
		}
		if (!started) return "0";	/* 当结果是全0时 */
		else return result.str();
	}
	/* 两个BigInt相乘 */
	static BigInt multiply(const BigInt& lhs, const BigInt& rhs){
		const std::vector<int64_t>& x = lhs.elems;
		const std::vector<int64_t>& y = rhs.elems;
		std::vector<int64_t> result(x.size() + y.size(), 0);
		for (int i = 0; i < x.size(); ++i){
			for (int k = 0; k < y.size(); ++k){
				result[i + k] += x[i] * y[k];
				if (result[i + k] >= BIGINT_RADIX){
					result[i + k + 1] += result[i + k] / BIGINT_RADIX;
					result[i + k] %= BIGINT_RADIX;
				}
			}
		}
		while (!result.empty() && result.back() == 0) result.pop_back();	//去除高位0（先导0）
		return BigInt(result);
	}
private:
	BigInt(const std::vector<int64_t>& data) : elems(data){}
private:
	std::vector<int64_t> elems;	/* 亿进制整数 */
	const static int BIGINT_RADIX = 1000000000;
	const static int RADIX_LEN = 9;
};

class Solution {
public:
	string multiply(string num1, string num2) {
		if (num1.empty() || num2.empty()) return "";
		return BigInt::multiply(num1, num2).to_string();
	}
};