1.时间：O（N^3）;空间：O（1）	->超时
class Solution {
public:
	int maxProduct(vector<int>& nums) {
		if (nums.size() == 0) return 0;

		int max_product = std::numeric_limits<int>::min();
		for (int i = 0; i < nums.size(); ++i){
			for (int j = i; j < nums.size(); ++j){
				int product = 1;
				for (int k = i; k <= j; ++k){
					if (nums[k] == 0){
						product = 0;
						break;
					}
					product *= nums[k];
				}
				max_product = std::max(max_product, product);
			}
		}
		
		return max_product;
	}
};
2.时间：O（N^2）;空间：O（N^2）	->dp，超时
class Solution {
	/* 设状态为f（i，j），表示nums下标在区间[i，j]内的乘积 */
public:
	int maxProduct(vector<int>& nums) {
		if (nums.size() == 0) return 0;
		int max_product = nums[0];
		std::vector<std::vector<int>> dp(nums.size(), std::vector<int>(nums.size(), 0));
		/* 初始化dp */
		/*dp[0][0] = nums[0];
		for (int i = 1; i < nums.size(); ++i){
			dp[0][i] = nums[i] * dp[0][i - 1];
		}*/

		for (int i = 0; i < nums.size(); ++i){
			/*if (nums[i] == 0){
				max_product = std::max(max_product, 0);
				continue;
			}*/
			for (int k = i; k < nums.size(); ++k){
				/*if (nums[k] == 0){
					max_product = std::max(max_product, 0);
					break;
				}*/
				dp[i][k] = i != k ? nums[k] * dp[i][k - 1] : nums[i];
				max_product = std::max(max_product, dp[i][k]);
			}
		}
		return max_product;
	}
};
3.时间：O（N^2）;空间：O（N）	->dp，超时
class Solution {
	/* 设状态为f（i，j），表示nums下标在区间[i，j]内的乘积 */
public:
	int maxProduct(vector<int>& nums) {
		if (nums.size() == 0) return 0;
		int max_product = nums[0];
		std::vector<int> dp(nums.size(), 0);
		for (int i = 0; i < nums.size(); ++i){
			for (int k = i; k < nums.size(); ++k){
				dp[k] = i == k ? nums[k] : nums[k] * dp[k - 1];
				max_product = std::max(max_product, dp[k]);
			}
		}
		return max_product;
	}
};
4.时间：O（N）；空间：O（N）	->一遍扫描
/* 参考博客地址：http://blog.csdn.net/worldwindjp/article/details/39826823 */ 
class Solution {
public:
	int maxProduct(vector<int>& nums) {
		if (nums.size() == 0) return 0;
		int result = nums[0];
		/* 记录nums在区间[0,i]上的最小和最大乘积（对应最小负数和最大正数） */
		std::vector<int> min_products(nums.size(), 0);
		std::vector<int> max_products(nums.size(), 0);	

		int product = nums[0];
		min_products[0] = nums[0];
		max_products[0] = nums[0];
		for (int i = 1; i < nums.size(); ++i){
			min_products[i] = std::min(std::min(min_products[i-1]*nums[i], max_products[i-1]*nums[i]), nums[i]);
			max_products[i] = std::max(std::max(min_products[i - 1] * nums[i], max_products[i - 1] * nums[i]), nums[i]);
			result = std::max(result, max_products[i]);
		}
		
		return result;
	}
};
5.时间：O（N）；空间：O（1）	->一遍扫描
class Solution {
public:
	int maxProduct(vector<int>& nums) {
		if (nums.size() == 0) return 0;
		int result = nums[0];
		/* 记录nums在区间[0,i]上的最小和最大乘积（对应最小负数和最大正数） */
		int max_product = nums[0];
		int min_product = nums[0];
		for (int i = 1; i < nums.size(); ++i){
			int min_product_tmp = min_product * nums[i];
			int max_product_tmp = max_product * nums[i];
			min_product = std::min(std::min(min_product_tmp, max_product_tmp), nums[i]);
			max_product = std::max(std::max(min_product_tmp, max_product_tmp), nums[i]);
			result = std::max(result, max_product);
		}
		
		return result;
	}
};