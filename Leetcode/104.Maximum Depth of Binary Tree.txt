1.时间：O（N）；空间：O（LOGN）	-> 递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	int maxDepth(TreeNode* root) {
		if (root == nullptr) return 0;
		return maxDepth(root, false);
	}
private:
	int maxDepth(TreeNode* root, bool hasbrother){
		if (root == nullptr) return hasbrother ? std::numeric_limits<int>::min() : 0;
		return std::max(maxDepth(root->left, root->right != nullptr),
			maxDepth(root->right, root->left != nullptr)) + 1;
	}
};
2.时间：O（N）；空间：O（LOGN）	-> 递归 （最大的肯定是叶子结点，因此不需额外判断）
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	int maxDepth(TreeNode* root) {
		if (root == nullptr) return 0;
		return std::max(maxDepth(root->left), maxDepth(root->right)) + 1;
	}
};
3.时间：O（N）；空间：O（LOGN）	->迭代
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	int maxDepth(TreeNode* root) {
		if (root == nullptr) return 0;
		std::stack<std::pair<TreeNode*, int>> stk;
		stk.push(std::pair<TreeNode*, int>(root, 1));
		int result = std::numeric_limits<int>::min();
		while (!stk.empty()){
			auto curNode = stk.top().first;
			int depth = stk.top().second;
			stk.pop();
			if (curNode->left == nullptr && curNode->right == nullptr){
				result = std::max(result, depth);
			}
			if (curNode->left != nullptr){
				stk.push(std::pair<TreeNode*, int>(curNode->left, depth + 1));
			}
			if (curNode->right != nullptr){
				stk.push(std::pair<TreeNode*, int>(curNode->right, depth + 1));
			}
		}
		return result;
	}
};