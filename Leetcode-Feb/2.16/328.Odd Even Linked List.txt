1.时间：O（N）；空间：O（1）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	ListNode* oddEvenList(ListNode* head) {
		if (head == nullptr || head->next == nullptr) return head;
		ListNode* p = head;
		ListNode oddHead(-1), evenHead(-1);
		ListNode* p1 = &oddHead, *p2 = &evenHead;
		int count = 1;
		while (p != nullptr){
			if (count & 0x01){
				p1->next = p;
				p1 = p1->next;
			} else{
				p2->next = p;
				p2 = p2->next;
			}
			p = p->next;
			count++;
		}
		p1->next = nullptr;
		p2->next = nullptr;
		p1->next = evenHead.next;
		head = oddHead.next;
		return head;
	}
};
2.时间：O（N）；空间：O（1）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	ListNode* oddEvenList(ListNode* head) {
		if (head == nullptr || head->next == nullptr) return head;
		ListNode* p = head;
		ListNode oddHead(-1), evenHead(-1);
		ListNode* p1 = &oddHead, *p2 = &evenHead;
		bool isOdd = true;	/* 相比count，可以加速 */
		while (p != nullptr){
			if (isOdd){
				p1->next = p;
				p1 = p1->next;
			} else{
				p2->next = p;
				p2 = p2->next;
			}
			p = p->next;
			isOdd = !isOdd;
		}
		p1->next = nullptr;
		p2->next = nullptr;
		p1->next = evenHead.next;
		head = oddHead.next;
		return head;
	}
};
3.时间：O（N）；空间：O（1）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	ListNode* oddEvenList(ListNode* head) {
		if (head == nullptr || head->next == nullptr) return head;
		ListNode* p = head;
		ListNode oddHead(-1), evenHead(-1);
		ListNode* p1 = &oddHead, *p2 = &evenHead;
		while (p != nullptr && p->next != nullptr){
			p1->next = p;
			p1 = p1->next;
			p2->next = p->next;
			p2 = p2->next;
			p = p->next->next;
		}
		if (p != nullptr){
			p1->next = p;
			p1 = p1->next;
		}
		p1->next = evenHead.next;
		p2->next = nullptr;
		head = oddHead.next;
		return head;
	}
};
4.时间：O（N）；空间：O（1）
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
public:
	ListNode* oddEvenList(ListNode* head) {
		if (head == nullptr || head->next == nullptr) return head;
		ListNode* odd = head;
		ListNode* even = head->next;
		ListNode* evenHead = even;
		while (odd->next != nullptr && even->next != nullptr){
			odd->next = even->next;
			odd = odd->next;
			even->next = odd->next;
			even = even->next;
		}
		odd->next = evenHead;
		return head;
	}
};