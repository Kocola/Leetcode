1.时间：O（N^2）;空间：O（N）
class Solution {
public:
	vector<string> wordBreak(string s, vector<string>& wordDict) {
		if (s.size() == 0) return std::vector<std::string>();

		std::unordered_set<std::string> dict;
		for (auto it : wordDict) dict.insert(it);

		std::vector<bool> dp(s.size() + 1, false);
		dp[0] = true;
		/* path记录路径，path[i][k]为true，表示s[k, i)是一个合法单词，可以在k处切开 */
		std::vector<std::vector<bool>> path(s.size() + 1, std::vector<bool>(s.size(), false));
		
		for (int i = 1; i <= s.size(); ++i){
			for (int k = i - 1; k >= 0; --k){
				if (dp[k] && dict.find(s.substr(k, i - k)) != dict.end()){
					dp[i] = true;
					path[i][k] = true;
				}
			}
		}

		std::vector<std::string> result;
		std::vector<std::string> break_words;
		gen_path(s, path, result, s.size(), break_words);

		return result;
	}
private:
	void gen_path(const std::string& s, const std::vector<std::vector<bool>>& path, 
		std::vector<std::string>& result, int cur, std::vector<std::string>& break_words){
		if (cur == 0){
			std::string tmp;
			for (auto it = break_words.crbegin(); it != break_words.crend(); ++it){
				tmp += *it + " ";
			}
			tmp.erase(std::prev(tmp.end()));
			result.push_back(tmp);
			return;
		}
		for (int i = 0; i < s.size(); ++i){
			if (path[cur][i]){
				break_words.push_back(s.substr(i, cur - i));
				gen_path(s, path, result, i, break_words);
				break_words.pop_back();
			}
		}
	}
};