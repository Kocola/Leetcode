1.时间：O（N）；空间：O（LOGN）	->超时
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
class Solution {
public:
	int countNodes(TreeNode* root) {
		if (root == nullptr) return 0;
		return countNodes(root->left) + countNodes(root->right) + 1;
	}
};
2.时间：O（LOGN）；空间：O（1）
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
class Solution {
public:
	int countNodes(TreeNode* root) {
		if (root == nullptr) return 0;
		int left_num = 0, right_num = 0;
		TreeNode* p = root;
		while (p != nullptr){
			p = p->left;
			left_num++;
		}
		p = root;
		while (p != nullptr){
			p = p->right;
			right_num++;
		}
		if (left_num == right_num){
			if (left_num == 0) return 1;
			return std::pow(2, left_num) - 1;
		} else{
			return countNodes(root->left) + countNodes(root->right) + 1;
		}
	}
};