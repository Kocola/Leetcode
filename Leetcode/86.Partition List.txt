1.时间：O（N）；空间：O（1）

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution {
public:
	ListNode* partition(ListNode* head, int x) {
		if (head == nullptr) return head;
		/* 添加头结点 */
		ListNode* p = new ListNode(-1);
		p->next = head;
		head = p;
		/* 找到第一个value值>x的结点的前驱 */
		while (p->next != nullptr && p->next->val < x){
			p = p->next;
		}
		ListNode* prev = p;
		ListNode* cur = prev->next;
		while (cur != nullptr){
			if (cur->val < x){
				prev->next = cur->next;
				cur->next = p->next;
				p->next = cur;
				cur = prev->next;
				p = p->next;
			}
			else{
				prev = cur;
				cur = prev->next;
			}
		}
		/* 删除头结点 */
		p = head;
		head = head->next;
		delete p;
		
		return head;
	}
};
2.时间：O（N）；空间：O（1） -> 思路更清晰
class Solution {
public:
	ListNode* partition(ListNode* head, int x) {
		if (head == nullptr) return head;
		ListNode* l1 = addHeadNode(nullptr);
		ListNode* l2 = addHeadNode(nullptr);
		ListNode* p = head;
		ListNode* p1 = l1;
		ListNode* p2 = l2;
		while (p != nullptr){
			if (p->val < x){
				p1->next = p;
				p1 = p1->next;
			}
			else{
				p2->next = p;
				p2 = p2->next;
			}
			p = p->next;
		}
		/* 合并两个链表 */
		/* 不能将3,4放在1,2行前，不然会出错，出错示例[1], 0 */
		p1->next = l2->next;
		p2->next = nullptr;
		l1 = removeNodeInHead(l1);
		l2 = removeNodeInHead(l2);

		return l1;
	}
private:
	/* 添加头结点 */
	ListNode* addHeadNode(ListNode* l){
		ListNode* p = new ListNode(-1);
		p->next = l;
		l = p;
		return l;
	}
	/* 删除头结点 */
	ListNode* removeNodeInHead(ListNode* l){
		ListNode* p = l;
		l = l->next;
		delete p;
		return l;
	}
};