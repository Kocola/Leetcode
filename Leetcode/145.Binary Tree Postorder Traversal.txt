1.时间：O（N）；空间：O（N）	->类似两个栈模拟
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	/* 两个栈实现，S1的顺序相当于先序，这里将result模拟栈，最后reverse一次 */
	vector<int> postorderTraversal(TreeNode* root) {
		if (root == nullptr) return std::vector<int>();
		std::vector<int> result;
		std::stack<TreeNode*> stk;
		stk.push(root);
		while (!stk.empty()){
			auto cur = stk.top();
			stk.pop();
			result.push_back(cur->val);
			if (cur->left != nullptr) stk.push(cur->left);
			if (cur->right != nullptr) stk.push(cur->right);
		}
		std::reverse(result.begin(), result.end());
		return result;
	}
};
2.时间：O（N）；空间：O（1）
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	vector<int> postorderTraversal(TreeNode* root) {
		if (root == nullptr) return std::vector<int>();
		std::vector<int> result;
		std::stack<TreeNode*> stk;
		stk.push(root);
		TreeNode* lastVisited = root;
		TreeNode* cur = nullptr;
		while (!stk.empty()){
			cur = stk.top();
			if (cur->left != nullptr && cur->left != lastVisited && cur->right != lastVisited){
				stk.push(cur->left);
			}
			else if (cur->right != nullptr && cur->right != lastVisited){
				stk.push(cur->right);
			}
			else{
				result.push_back(cur->val);
				lastVisited = cur;
				stk.pop();
			}
		}
		return result;
	}
};
3.时间：O（N）；空间：O（1）	->	线索化