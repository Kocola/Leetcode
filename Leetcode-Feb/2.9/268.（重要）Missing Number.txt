1.时间：O（N）；空间：O（N）	->使用额外空间
class Solution {
public:
	int missingNumber(vector<int>& nums) {
		if (nums.empty()) return 0;

		std::unordered_map<int, int> hashTable;
		/* 每个元素最多出现一次 */
		for (int i = 0; i < nums.size(); ++i)
			hashTable[nums[i]] = 1;
		/* 检测缺失的元素 */
		for (int i = 0; i < nums.size() + 1; ++i){
			if (hashTable.find(i) == hashTable.end())
				return i;
		}

		return 0;
	}
};
2.时间：O（N）；空间：O（1）	->0~n相加-数组中的数，缺点：可能会溢出
3.时间：O（N）；空间：O（1）
class Solution {
	/* 利用0^a = a, a ^ b ^ a = b */
	/* 1.从所有0~n的数异或一遍；
	2.将异或后的数把数组中的数异或一遍，这样出现过两次的数都被置0，剩下的就是0^missing num = missing num;
	*/
public:
	int missingNumber(vector<int>& nums) {
		if (nums.empty()) return 0;

		int result = nums.size();
		for (int i = 0; i < nums.size(); ++i){
			result ^= (i ^ nums[i]);
		}

		return result;
	}
};
4.时间：O（N）；空间：O（1）
class Solution {
	/* 将数字x放在位置i上，最后扫描一次，如果num[i] != i，那么i即是所求，
		注意，例如数据：[1,2,3,4,5]，这里5超出数组下标上界，需要额外处理*/
public:
	int missingNumber(vector<int>& nums) {
		if (nums.empty()) return 0;

		for (int i = 0; i < nums.size();){
			int& num = nums[i];
			if (num >= nums.size()){
				++i;
				continue;
			} else if (num != i){
				std::swap(num, nums[num]);
			} else{
				i++;
			}
		}

		for (int i = 0; i < nums.size(); ++i){
			if (nums[i] != i) return i;
		}

		/* 在[0,1,2,3,4]这种情况时，返回nums.size() */
		return nums.size();
	}
};

