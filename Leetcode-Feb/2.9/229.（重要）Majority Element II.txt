1.时间：O（N）；空间：O（1）	->摩尔投票法
class Solution {
	/* 摩尔投票法：任意一个数组出现次数大于n/3的众数最多有2个
	核心：找出两个候选众数进行投票，需要两遍遍历，第一遍找出两个候选众数，
	第二遍重新投票验证这两个候选众数是否是众数即可 */
public:
	vector<int> majorityElement(vector<int>& nums) {
		if (nums.empty()) return std::vector<int>();
		if (nums.size() == 1) return std::vector<int>{nums.front()};

		std::vector<int> result;
		int cNum1 = nums.front(), count1 = 1;
		int cNum2 = 0, count2 = 0;
		/* 查找候选众数 */
		for (int i = 1; i < nums.size(); ++i){
			if (nums[i] == cNum1) count1++;
			else if (nums[i] == cNum2) count2++;
			else if (count1 == 0){
				cNum1 = nums[i];
				count1 = 1;
			}
			else if (count2 == 0){
				cNum2 = nums[i];
				count2 = 1;
			}
			else{
				count1--;
				count2--;
			}
		}
		/* 验证候选众数 */
		count1 = 0;
		count2 = 0;
		for (int i = 0; i < nums.size(); ++i){
			if (nums[i] == cNum1) count1++;
			else if (nums[i] == cNum2) count2++;
		}
		if (count1 > nums.size() / 3) result.push_back(cNum1);
		if (count2 > nums.size() / 3) result.push_back(cNum2);

		return result;
	}
};