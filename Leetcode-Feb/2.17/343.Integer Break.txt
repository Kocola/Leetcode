1.时间：O（sqrt（N））；空间：O（1）	-->>答案错误
class Solution {
public:
	int integerBreak(int n) {
		if (n < 2) return 0;
		int factor = 1;
		for (int i = 1; i * i <= n; ++i){
			factor = i;
		}
		const int Upper = n / factor - 1;
		int result = 1;
		for (int i = 0; i < Upper; ++i){
			result *= factor;
		}
		result *= (factor + n - (Upper * factor));
		return result;
	}
};
2.时间：O（N^2）;空间：O（N）
class Solution {
public:
	int integerBreak(int n) {
		if (n < 2) return 0;
		std::vector<int> dp(n + 1, 1);
		for (int i = 3; i <= n; ++i){
			dp[i] = -1;
			for (int k = 1; k < i; ++k){
				dp[i] = std::max(dp[i], std::max(k*(i - k), k * dp[i - k]));
			}
		}
		return dp[n];
	}
};
3.时间：O（）；空间：O（N）
class Solution {
public:
	int integerBreak(int n) {
		if (n == 2) return 1;
		if (n == 3) return 2;
		if (n % 3 == 0) return pow(3, n / 3);
		else if (n % 3 == 1) return 2 * 2 * pow(3, (n - 4) / 3);
		else return 2 * pow(3, n / 3);
	}
};
