1.时间：O（N^3）;空间：O（1）
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if(nums.size() < 4) return vector<vector<int>>{};
        sort(nums.begin(), nums.end());
        vector<vector<int>> result;
        for(int a = 0; a < nums.size() - 3; ++a){
            if(a > 0 && nums[a] == nums[a - 1]) continue;
            for(int b = a + 1; b < nums.size() - 2; ++b){
                if(b > a + 1 && nums[b] == nums[b - 1]) continue;
                int c = b + 1;
                int d = nums.size() - 1;
                while(c < d){
                    if(c > b + 1 && nums[c] == nums[c - 1]){
                        c++;
                        continue;
                    }
                    if(d < nums.size() - 1 && nums[d] == nums[d+1]){
                        d--;
                        continue;
                    }
                    int sum = nums[a] + nums[b] + nums[c] + nums[d];
                    if(sum < target) c++;
                    else if(sum > target) d--;
                    else{
                        result.push_back({nums[a], nums[b], nums[c], nums[d]});
                        c++;
                        d--;
                    }
                }
            }
        }
        return result;
    }
};
2.时间：平均，O（N^2），最坏，O（N^4）;空间：O（N^2）-> 但测试的结果是比上面还慢
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if(nums.size() < 4) return std::vector<std::vector<int>>{};
        sort(nums.begin(), nums.end());
        std::vector<std::vector<int>> result;
        std::unordered_map<int, std::vector<std::pair<int, int>>> map;
        for(int i = 0; i < nums.size() - 1; ++i){
            for(int j = i + 1; j < nums.size(); ++j){
                map[nums[i] + nums[j]].push_back(std::pair<int,int>(i, j));
            }
        }
        for(int a = 0; a < nums.size() - 3; ++a){
            for(int b = a + 1; b < nums.size() - 2; ++b){
                int searchNum = target - (nums[a] + nums[b]);
                if(map.find(searchNum) == map.end()) continue;
                const auto& indexPairVec = map[searchNum];
                for(int i = 0; i < indexPairVec.size(); ++i){
                    int c = indexPairVec[i].first;
                    int d = indexPairVec[i].second;
                    if(c <= b) continue;
                    result.push_back({nums[a], nums[b], nums[c], nums[d]});
                }
            }
        }
        std::sort(result.begin(), result.end());
        result.erase(std::unique(result.begin(), result.end()), result.end());
        return result;
    }
};