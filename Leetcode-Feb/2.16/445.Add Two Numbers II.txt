1.时间：O（N）；空间：O（N）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		if (l1 == nullptr) return l2;
		if (l2 == nullptr) return l1;
		std::stack<int> s1, s2;
		ListNode* p1 = l1;
		while (p1 != nullptr){
			s1.push(p1->val);
			p1 = p1->next;
		}
		ListNode* p2 = l2;
		while (p2 != nullptr){
			s2.push(p2->val);
			p2 = p2->next;
		}
		int carry = 0;
		ListNode head(-1), *p = &head;
		while (!s1.empty() && !s2.empty()){
			int sum = s1.top() + s2.top() + carry;
			s1.pop();
			s2.pop();
			auto new_node =  new ListNode(sum % 10);
			new_node->next = head.next;
			head.next = new_node;
			carry = sum / 10;
		}
		while (!s1.empty()){
			int sum = carry + s1.top();
			s1.pop();
			auto new_node = new ListNode(sum % 10);
			new_node->next = head.next;
			head.next = new_node;
			carry = sum / 10; 
		}
		while (!s2.empty()){
			int sum = carry + s2.top();
			s2.pop();
			auto new_node = new ListNode(sum % 10);
			new_node->next = head.next;
			head.next = new_node;
			carry = sum / 10;
		}
		if (carry > 0){
			auto new_node = new ListNode(carry);
			new_node->next = head.next;
			head.next = new_node;
		}
		return head.next;
	}
};
2.时间：O（N）；空间：O（N）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		if (l1 == nullptr) return l2;
		if (l2 == nullptr) return l1;
		l1 = reverseList(l1);
		l2 = reverseList(l2);
		int carry = 0;
		ListNode head(-1);
		while (l1 != nullptr && l2 != nullptr){
			int sum = l1->val + l2->val + carry;
			auto new_node = new ListNode(sum % 10);
			new_node->next = head.next;
			head.next = new_node;
			carry = sum / 10;
			l1 = l1->next;
			l2 = l2->next;
		}
		while (l1 != nullptr){
			int sum = l1->val + carry;
			auto new_node = new ListNode(sum % 10);
			new_node->next = head.next;
			head.next = new_node;
			carry = sum / 10;
			l1 = l1->next;
		}
		while (l2 != nullptr){
			int sum = l2->val + carry;
			auto new_node = new ListNode(sum % 10);
			new_node->next = head.next;
			head.next = new_node;
			carry = sum / 10;
			l2 = l2->next;
		}
		if (carry != 0){
			auto new_node = new ListNode(carry);
			new_node->next = head.next;
			head.next = new_node;
		}
		return head.next;
	}
private:
	ListNode* reverseList(ListNode* head){
		if (head == nullptr || head->next == nullptr) return head;
		ListNode* prev = head, *cur = head->next;
		prev->next = nullptr;
		while (cur != nullptr){
			ListNode* cur_next = cur->next;
			cur->next = prev;
			prev = cur;
			cur = cur_next;
		}
		head = prev;
		return head;
	}
};