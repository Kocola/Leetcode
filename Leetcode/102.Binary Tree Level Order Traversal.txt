1.时间：O（N）；空间：O（1）	-> [1,2,3,4,5]数据错误
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	vector<vector<int>> levelOrder(TreeNode* root) {
		if (root == nullptr) return std::vector<std::vector<int>>();
		std::vector<std::vector<int>> result;
		std::queue<TreeNode*> queue;
		queue.push(root);
		TreeNode* lastLevelTailNode = root;
		std::vector<int> level;
		while (!queue.empty()){
			auto node = queue.front();
			queue.pop();
			level.push_back(node->val);
			if (node == lastLevelTailNode){
				result.push_back(level);
				level.clear();
				lastLevelTailNode = node->right != nullptr ? node->right : node->left;
			}
			
			if (node->left != nullptr){
				queue.push(node->left);
			}
			if (node->right != nullptr){
				queue.push(node->right);
			}
		}
		return result;
	}
};
2.时间：O（N）；空间：O（1）     迭代 ->两个结点，一个记录当前行最后一个结点，一个记录下一行的最后一个结点
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	vector<vector<int>> levelOrder(TreeNode* root) {
		if (root == nullptr) return std::vector<std::vector<int>>();
		std::vector<std::vector<int>> result;
		std::queue<TreeNode*> queue;
		queue.push(root);
		TreeNode* curLevelLast = root;
		TreeNode* nextLevelLast = nullptr;
		std::vector<int> level;
		while (!queue.empty()){
			auto node = queue.front();
			level.push_back(node->val);
			queue.pop();
			if (node->left != nullptr){
				queue.push(node->left);
				nextLevelLast = node->left;
			}
			if (node->right != nullptr){
				queue.push(node->right);
				nextLevelLast = node->right;
			}
			/* 如果当前结点是该行最后一个结点 */
			if (node == curLevelLast){
				curLevelLast = nextLevelLast;
				result.push_back(level);
				level.clear();
			}
		}
		return result;
	}
};
3.2.时间：O（N）；空间：O（N）     递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	vector<vector<int>> levelOrder(TreeNode* root) {
		if (root == nullptr) return std::vector<std::vector<int>>();
		std::vector<std::vector<int>> result;
		traversal(root, 1, result);
		return result;
	}
private:
	void traversal(TreeNode* root, size_t level, std::vector<std::vector<int>>& result){
		if (root == nullptr) return;
		if (level > result.size()){
			result.push_back(std::vector<int>());
		}
		result[level - 1].push_back(root->val);
		traversal(root->left, level + 1, result);
		traversal(root->right, level + 1, result);
	}
};