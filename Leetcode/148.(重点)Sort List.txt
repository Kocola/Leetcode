1.时间：O（NLOGN）；空间：O（LOGN）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
	ListNode* sortList(ListNode* head) {
		if (head == nullptr || head->next == nullptr) return head;	//如果没有head->next == nullptr，将会陷入无限循环
		/* 通过快慢指针，将链表分为两部分 */
		ListNode* slow = head, *fast = head;
		while (fast->next != nullptr && fast->next->next != nullptr){	//如果是fast != nullptr && fast->next != nullptr，在两个结点时会陷入无限循环
			slow = slow->next;
			fast = fast->next->next;
		}
		fast = slow;
		slow = slow->next;
		fast->next = nullptr;
		auto l1 = sortList(head);	//前半段排序
		auto l2 = sortList(slow);		//后半段排序
		return mergeTwoLists(l1, l2);
	}
private:
	ListNode* mergeTwoLists(ListNode* l1, ListNode* l2){
		if (l1 == nullptr) return l2;
		if (l2 == nullptr) return l1;
		ListNode head(-1);
		ListNode* p = &head, *p1 = l1, *p2 = l2;
		while (p1 != nullptr && p2 != nullptr){
			if (p1->val < p2->val){
				p->next = p1;
				p1 = p1->next;
			}
			else{
				p->next = p2;
				p2 = p2->next;
			}
			p = p->next;
		}
		if (p1 != nullptr) p->next = p1;
		if (p2 != nullptr) p->next = p2;
		return head.next;
	}
};