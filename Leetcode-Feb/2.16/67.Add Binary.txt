1.时间：O（MAX（M，N））；空间：O（1）
class Solution {
public:
	string addBinary(string a, string b) {
		if (a.size() == 0) return b;
		if (b.size() == 0) return a;
		/* 反转字符串a和b */
		std::reverse(a.begin(), a.end());
		std::reverse(b.begin(), b.end());
		/* 累加，2进制+ */
		std::string result;
		int carry = 0;
		for (int i = 0; i < a.size() || i < b.size(); ++i){
			int sum = carry;
			if (i < a.size()) sum += a[i] - '0';
			if (i < b.size()) sum += b[i] - '0';
			result.push_back(sum % 2 + '0');
			carry = sum / 2;
		}
		/*for (int i = 0; i < a.size(); ++i){
			int sum = (a[i] - '0') + carry;
			result.push_back(sum % 2 + '0');
			carry = sum / 2;
		}
		for (int i = 0; i < b.size(); ++i){
			int sum = (b[i] - '0') + carry;
			result.push_back(sum % 2 + '0');
			carry = sum / 2;
		}*/
		if (carry == 1) result.push_back('1');
		std::reverse(result.begin(), result.end());
		return result;
	}
};
2.时间：O（N）；空间：O（1）
class Solution {
public:
	string addBinary(string a, string b) {
		if (a.size() == 0) return b;
		if (b.size() == 0) return a;
		const int size_a = a.size();
		const int size_b = b.size();
		if (size_a < size_b) return addBinary(b, a);
		b = std::string(size_a - size_b, '0') + b;
		int carry = 0;
		for (int i = size_a - 1; i >= 0; --i){
			int sum = (a[i] - '0') + (b[i] - '0') + carry;
			b[i] = sum % 2 + '0';
			carry = sum / 2;
		}
		if (carry == 1) b = "1" + b;
		return b;
	}
};