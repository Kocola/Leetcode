1.时间：O（N^2）;空间：O（N）	->暴力
class Solution {
public:
	int findSubstringInWraproundString(string p) {
		if (p.size() < 2) return p.size();
		int count = 0;
		std::unordered_set<std::string> hashTable;
		for (int i = 0; i < p.size(); ++i){
			for (int k = i; k < p.size(); ++k){
				std::string substr;
				if (k == i){
					substr = p.substr(i, 1);
					
				} else{
					if ((p[k - 1] - 'a' + 1) % 26 != (p[k] - 'a')) break;
					substr = p.substr(i, k - i + 1);
				}
				if (hashTable.find(substr) == hashTable.end()){
					count++;
					hashTable.insert(substr);
				}
			}
		}
		return count;
	}
};
2.时间：O（N）；空间：O（1）
class Solution {
public:
	int findSubstringInWraproundString(string p) {
		if (p.size() < 2) return p.size();
		int len = 0;
		std::vector<int> cnt(26, 0);
		for (int i = 0; i < p.size(); ++i){
			if (i > 0 && ((p[i - 1] - 'a') + 1) % 26 == (p[i] - 'a')){
				len++;
			} else{
				len = 1;
			}
			int &count = cnt[p[i] - 'a'];
			count = std::max(count, len);
		}
		return std::accumulate(cnt.begin(), cnt.end(), 0);
	}
};
3.时间：O（N）；空间：O（1） ->优化掉初始条件判断
class Solution {
public:
	int findSubstringInWraproundString(string p) {
		if (p.size() < 2) return p.size();
		std::vector<int> cnt(26, 0);
		cnt[p[0] - 'a']++;
		int len = 1;
		for (int i = 1; i < p.size(); ++i){
			if (((p[i - 1] - 'a') + 1) % 26 == (p[i] - 'a')){
				len++;
			} else{
				len = 1;
			}
			int &count = cnt[p[i] - 'a'];
			count = std::max(count, len);
		}
		return std::accumulate(cnt.begin(), cnt.end(), 0);
	}
};