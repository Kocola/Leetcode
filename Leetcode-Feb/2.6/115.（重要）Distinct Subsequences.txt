1.时间：O（M*N）；空间：O（M）	->动态规划+滚动数组
class Solution {
	/*	设状态为f(i,j)，表示T[0,i]在S[0,j]里出现的次数；首先，无轮S[j]和T[i]是否相等，
		若不使用S[j]，则f(i,j) = f(i, j-1)；若S[j] == T[i]，则可以使用S[j]，此时状态转移方程为:
		f(i,j) = f(i, j - 1) + f(i-1, j-1);
	*/
public:
	int numDistinct(string s, string t) {
		if (t.size() == 0 || s.size() < t.size()) return 0;
		std::vector<int> dp(s.size() + 1, 1);//dp[0][i] = 1;
		dp[0] = 1;	//dp[0][0] = 1;
		int upper_left = 0;	//记录dp[i-1][k-1]
		for (int i = 1; i <= t.size(); ++i){
			upper_left = dp[i-1];
			dp[i - 1] = 0;	//dp[i][0] = 0; 1<= i <= t.size();
			for (int k = i; k <= s.size(); ++k){
				int upper = dp[k];
				dp[k] = dp[k - 1];
				if (t[i - 1] == s[k - 1]) dp[k] += upper_left;
				upper_left = upper;
			}
		}
		return dp[s.size()];
	}
};
2.时间：O（M*N）；空间：O（M）	->动态规划
class Solution {
	/*	设状态为f(i,j)，表示T[0,j]在S[0,i]里出现的次数；首先，无轮S[i]和T[j]是否相等，
		若不使用S[i]，则f(i,j) = f(i, j-1)；若S[i] == T[j]，则可以使用S[i]，此时状态转移方程为:
		f(i,j) = f(i - 1, j) + f(i-1, j-1);
	*/
public:
	int numDistinct(string s, string t) {
		if (t.size() == 0 || s.size() < t.size()) return 0;
		std::vector<std::vector<int>> dp(s.size() + 1, std::vector<int>(t.size() + 1, 0));
		/* 初始化dp */
		for (int i = 0; i <= s.size(); ++i){
			dp[i][0] = 1;
		}

		for (int i = 1; i <= s.size(); ++i){
			for (int k = 1; k <= t.size(); ++k){
				dp[i][k] = dp[i - 1][k];
				if (s[i - 1] == t[k - 1]) dp[i][k] += dp[i - 1][k - 1];
			}
		}
		return dp[s.size()][t.size()];
	}
};
3.时间：O（M*N）；空间：O（M）	->动态规划+滚动数组
class Solution {
	/*	设状态为f(i,j)，表示T[0,j]在S[0,i]里出现的次数；首先，无轮S[i]和T[j]是否相等，
		若不使用S[i]，则f(i,j) = f(i, j-1)；若S[i] == T[j]，则可以使用S[i]，此时状态转移方程为:
		f(i,j) = f(i - 1, j) + f(i-1, j-1);
	*/
public:
	int numDistinct(string s, string t) {
		if (t.size() == 0 || s.size() < t.size()) return 0;
		std::vector<int> dp(t.size() + 1, 0);
		dp[0] = 1;
		int upper_left = dp[0];
		for (int i = 1; i <= s.size(); ++i){
			upper_left = dp[0];
			for (int k = 1; k <= t.size() && k <= i; ++k){ //k <= i的原因是当前i如果小于k结果会有问题,数据例子["eee","eee"]
				int upper = dp[k];
				if (s[i - 1] == t[k - 1]) dp[k] += upper_left;
				upper_left = upper;
			}
		}
		return dp[t.size()];
	}
};
4.时间：O（M*N）；空间：O（M）	->动态规划+滚动数组（不使用upper_left）
class Solution {
	/*	设状态为f(i,j)，表示T[0,j]在S[0,i]里出现的次数；首先，无轮S[i]和T[j]是否相等，
		若不使用S[i]，则f(i,j) = f(i, j-1)；若S[i] == T[j]，则可以使用S[i]，此时状态转移方程为:
		f(i,j) = f(i - 1, j) + f(i-1, j-1);
	*/
public:
	int numDistinct(string s, string t) {
		if (t.size() == 0 || s.size() < t.size()) return 0;
		std::vector<int> dp(t.size() + 1, 0);
		dp[0] = 1;
		for (int i = 0; i < s.size(); ++i){
			for (int k = std::min((int)t.size() - 1, i); k >= 0; --k){
				dp[k + 1] += s[i] == t[k] ? dp[k] : 0;
			}
		}
		return dp[t.size()];
	}
};