1.时间：O（2^N）;空间：O（N）	->递归，超时
class Solution {
public:
	bool wordBreak(string s, vector<string>& wordDict) {
		if (s.size() == 0) return true;
		std::unordered_set<std::string> dict;
		for (auto it : wordDict) dict.insert(it);
		return dfs(s, dict, 0, 0);
	}
private:
	bool dfs(const std::string& s, std::unordered_set<std::string>& dict, int start, int cur){
		if (cur == s.size()){
			auto str = s.substr(start, cur - start);
			return dict.find(str) != dict.end();
		}
		if (dfs(s, dict, start, cur + 1)) return true;
		if (dict.find(s.substr(start, cur - start + 1)) != dict.end()){
			if (dfs(s, dict, cur + 1, cur + 1)) return true;
		}
		return false;
	}
};
2.时间：O（2^N）;空间：O（N）	->递归，超时
class Solution {
public:
	bool wordBreak(string s, vector<string>& wordDict) {
		if (s.size() == 0) return true;
		std::unordered_map<char, std::vector<std::string>> dict;
		for (auto it : wordDict){
			if (dict.find(it[0]) != dict.end()){
				dict[it[0]].push_back(it);
			}
			dict.insert(std::pair<char, std::vector<std::string>>(it[0], std::vector<std::string>{it}));
		}

		return dfs(s, dict, 0);
	}
private:
	bool dfs(std::string& s, const std::unordered_map<char, std::vector<std::string>>& dict, int index){
		/* 递归结束条件 */
		if (index == s.size()){
			return true;
		}
		if (dict.find(s[index]) == dict.end()) return false;
		const std::vector<std::string>& strs = dict.at(s[index]);
		for (auto it : strs){
			if (s.substr(index, it.size()) == it && dfs(s, dict, index + it.size())) return true;
		}
		return false;
	}
};
3.时间：O（N^2）;空间：O（N）	->动态规划
class Solution {
	/*	 设状态为f（i），表示s[0, i)是否可以分词，则状态转移方程为
		 f（i）= any_of（f（j）&& s[j, i)属于dict）,0<=j<i
	*/
public:
	bool wordBreak(string s, vector<string>& wordDict) {
		if (s.size() == 0) return true;

		std::unordered_set<std::string> dict;
		for (auto it : wordDict) dict.insert(it);

		std::vector<bool> dp(s.size() + 1, false);
		dp[0] = true;

		for (int i = 1; i <= s.size(); ++i){
			for (int k = i - 1; k >= 0; --k){
				if (dp[k] && dict.find(s.substr(k, i - k)) != dict.end()){
					dp[i] = true;
					break;
				}
			}
		}

		return dp[s.size()];
	}
};