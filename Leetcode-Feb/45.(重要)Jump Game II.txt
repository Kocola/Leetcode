1.时间：O（）；空间：O（N）	->超时
class Solution {
public:
	int jump(vector<int>& nums) {
		if (nums.size() == 0) return 1;
		std::vector<int> dp(nums.size(), std::numeric_limits<int>::max());
		dp[0] = 0;
		for (int i = 0; i < nums.size(); ++i){
			int len = nums[i];
			for (int k = 1; k <= len && i + k < nums.size(); ++k){	// i + k < nums.size()：防止越界
				dp[i + k] = std::min(dp[i + k], dp[i] + 1);
			}
		}
		return dp[nums.size() - 1];
	}
};
2.时间：O（N）；空间：O（1）
class Solution {
public:
	int jump(vector<int>& nums) {
		if (nums.size() <= 1) return 0;	//仅有1个数时，返回0，表示不需要跳直接可达终点
		int step = 0;	//最小步数
		int left = 0, right = 0;	//[left, right]是当前能够覆盖的区间
		while (left <= right){
			step++;
			const int old_right = right;
			for (int i = left; i <= old_right; ++i){
				int new_right = i + nums[i];
				if (new_right >= nums.size() - 1) return step;
				if (new_right > right) right = new_right;
			}
			left = old_right + 1;	//上述区间内未达到终点，更新区间起点
		}
		return 0;
	}
};
3.时间：O（N）；空间：O（1）
class Solution {
public:
	/* 默认可达，如果不可达结果是错误的 */
	int jump(vector<int>& nums) {
		int result = 0;
		int last_reach = 0;	//不移动可达的最远距离
		int cur_reach = 0;	//移动一步后可达的最远距离
		for (int i = 0; i < nums.size(); ++i){
			if (i > last_reach){
				last_reach = cur_reach;
				result++;
			}
			cur_reach = std::max(cur_reach, i + nums[i]);
		}
		return result;
	}
};