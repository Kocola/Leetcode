1.时间：O（2^N）;空间：O（1）
class Solution {
public:
    vector<int> grayCode(int n) {
	    std::vector<int> result;
	    const int size = 1 << n;
    	result.reserve(size);
    	for (int i = 0; i < size; ++i){
	    	result.push_back(binart_to_gray(i));
    	}
	    return result;
    }
private:
    unsigned int binart_to_gray(int n){
	    return n ^ (n >> 1);
    }
};
2.时间：O（2^N）;空间：O（1）
class Solution {
public:
    vector<int> grayCode(int n) {
	    std::vector<int> result;
    	const int size = 1 << n;
	    result.reserve(size);
	    result.push_back(0);
	    for (int i = 0; i < n; ++i){
	    	int highest_bit = 1 << i;
		    for (int j = result.size() - 1; j >= 0; --j){
		    	result.push_back(highest_bit | result[j]);
	    	}
    	}
	    return result;
    }
};