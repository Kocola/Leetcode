1.时间：O（N）；空间：O（1）	-->>错误
class Solution {
public:
	string simplifyPath(string path) {
		if (path.empty()) return std::string();
		/* 找到最后一个.或者.. */
		int start_index = path.size() - 1;
		for (; start_index >= 0; --start_index){
			if (start_index == '.') break;
		}
		start_index = start_index == -1 ? 0 : start_index;
		std::string result = path.substr(start_index);
		/* 去除冗余的'/' */
		int index = 0;
		for (int i = 0; i < result.size(); ++i){
			if (result[i] != '/'){
				result[index++] = result[i];
			} else if (i < result.size() - 1 && result[i + 1] != '/'){
				result[index++] = result[i];
			}
		}
		return result;
	}
};
2.时间：O（N）；空间：O（N）
class Solution {
public:
	string simplifyPath(string path) {
		if (path.empty()) return std::string();
		std::vector<std::string> strs;
		for (int i = 0; i < path.size();){
			/* 跳过'/' */
			while (i < path.size() && path[i] == '/') ++i;
			std::string str;
			while (i < path.size() && path[i] != '/') str.push_back(path[i++]);
			/* 分析str中的内容 */
			if (str == ".." && !strs.empty()) strs.pop_back();
			if (str != "" && str != "." && str != "..") strs.push_back(str);
		}
		if (strs.empty()) return "/";
		std::string result;
		for (int i = 0; i < strs.size(); ++i){
			result += "/" + strs[i];
		}
		return result;
	}
};