/* 参考<<程序员代码面试指南>>p233 */
1.时间：O（2^N）;空间：O（N）
class Solution {
public:
	bool PredictTheWinner(vector<int>& nums) {
	    if(nums.empty()) return true;
		return first(nums, 0, nums.size() - 1) >= second(nums, 0, nums.size() - 1);
	}
private:
	int first(const std::vector<int>& nums, int start, int end){
		if (start == end) return nums[start];
		return std::max(nums[start] + second(nums, start + 1, end), nums[end] + second(nums, start, end - 1));
	}
	int second(const std::vector<int>& nums, int start, int end){
		if (start == end) return 0;
		return std::min(first(nums, start + 1, end), first(nums, start, end - 1));
	}
};
2.时间：O（N^2）;空间：O（N^2）
class Solution {
public:
	bool PredictTheWinner(vector<int>& nums) {
		if (nums.empty()) return true;
		std::vector<std::vector<int>> first(nums.size(), std::vector<int>(nums.size(), 0));
		std::vector<std::vector<int>> second = first;
		for (int k = 0; k < nums.size(); ++k){
			first[k][k] = nums[k];
			for (int i = k - 1; i >= 0; --i){
				first[i][k] = std::max(nums[i] + second[i + 1][k], nums[k] + second[i][k - 1]);
				second[i][k] = std::min(first[i+1][k], first[i][k-1]);
			}
		}
		return first[0][nums.size() - 1] >= second[0][nums.size() - 1];
	}
};