1.时间：O（N）；空间：O（1）
class Solution {
public:
	string addStrings(string num1, string num2) {
		if (num1.empty()) return num2;
		if (num2.empty()) return num1;
		if (num1.size() < num2.size()){
			num1 = std::string(num2.size() - num1.size(), '0') + num1;
		} else{
			num2 = std::string(num1.size() - num2.size(), '0') + num2;
		}
		std::string result;
		int carry = 0;
		for (int i = num1.size() - 1; i >= 0; --i){
			int sum = (num1[i] - '0') + (num2[i] - '0') + carry;
			result.push_back(sum % 10 + '0');
			carry = sum / 10;
		}
		if (carry != 0) result.push_back(carry + '0');
		std::reverse(result.begin(), result.end());
		return result;
	}
};
2.时间：O（N）；空间：O（1）
class Solution {
public:
	string addStrings(string num1, string num2) {
		if (num1.empty()) return num2;
		if (num2.empty()) return num1;
		if (num1.size() < num2.size()){
			num1 = std::string(num2.size() - num1.size(), '0') + num1;
		} else{
			num2 = std::string(num1.size() - num2.size(), '0') + num2;
		}
		std::string result(num1.size(), ' ');
		int carry = 0;
		for (int i = num1.size() - 1; i >= 0; --i){
			int sum = (num1[i] - '0') + (num2[i] - '0') + carry;
			result[i] = sum % 10 + '0';
			carry = sum / 10;
		}
		if (carry != 0) result = std::string(1, carry + '0') + result;
		return result;
	}
};