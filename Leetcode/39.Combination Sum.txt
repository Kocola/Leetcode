1.时间：O（N）；空间：O（N） 	->深搜+剪枝
class Solution {
public:
	vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
		if (candidates.size() == 0) return std::vector<std::vector<int>>();
		/* 排序，为剪枝作准备 */
		std::sort(candidates.begin(), candidates.end());
		std::vector<std::vector<int>> result;
		std::vector<int> path;
		dfs(candidates, 0, target, 0, path, result);
		return result;
	}
private:
	void dfs(std::vector<int>& candidates, int sum, const int target, int start,
		std::vector<int>& path, std::vector<std::vector<int>>& result){
		const int size = candidates.size();
		if (sum >= target){
			if (sum == target) result.push_back(path);
			return;
		}
		for (int i = start; i < size; ++i){
			path.push_back(candidates[i]);
			dfs(candidates, sum + candidates[i], target, i, path, result);
			path.pop_back();
		}
	}
};
2.时间：O（N）；空间：O（N） 	->深搜+剪枝
class Solution {
public:
	vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
		if (candidates.size() == 0) return std::vector<std::vector<int>>();
		/* 排序，为剪枝作准备 */
		std::sort(candidates.begin(), candidates.end());
		std::vector<std::vector<int>> result;
		std::vector<int> path;
		dfs(candidates, target, 0, path, result);
		return result;
	}
private:
	void dfs(std::vector<int>& candidates, int gap, int start,
		std::vector<int>& path, std::vector<std::vector<int>>& result){
		const int size = candidates.size();
		if (gap == 0){
			result.push_back(path);
			return;
		}
		for (int i = start; i < size; ++i){
			if (gap < candidates[i]) return;	//剪枝
			path.push_back(candidates[i]);
			dfs(candidates, gap - candidates[i], i, path, result);
			path.pop_back();
		}
	}
};