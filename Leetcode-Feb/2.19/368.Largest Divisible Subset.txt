1.时间：O（N^2）;空间：O（N）
class Solution {
/* dp[i] = max(dp[i], dp[k] + 1), 0 <= k < i */
public:
	vector<int> largestDivisibleSubset(vector<int>& nums) {
		if (nums.empty()) return std::vector<int>();
		if (nums.size() == 1) return std::vector < int > {nums.front()};
		std::vector<int> dp(nums.size(), 1);
		std::vector<int> path(nums.size());
		/* 初始化path（记录数字），使得path[i] = i; */
		for (int i = 0; i < path.size(); ++i) path[i] = i;
		int max_subsets = 1, start_index = 0;	/* 记录最大subset在dp中的开始下标 */
		/* 排序nums，使其降序 */
		std::sort(nums.begin(), nums.end(), std::greater<int>());
		for (int i = 1; i < nums.size(); ++i){
			for (int k = 0; k < i; ++k){
				if (nums[k] % nums[i] != 0) continue;
				if (dp[i] < dp[k] + 1){
					dp[i] = dp[k] + 1;
					path[i] = k;
				}
				if (dp[i] > max_subsets){
					max_subsets = dp[i];
					start_index = i;
				}
			}
		}
		/* 根据path和start_index找到对应的subset */
		std::vector<int> result;
		while (path[start_index] != start_index){
			result.push_back(nums[start_index]);
			start_index = path[start_index];
		}
		result.push_back(nums[start_index]);
		return result;
	}
};
