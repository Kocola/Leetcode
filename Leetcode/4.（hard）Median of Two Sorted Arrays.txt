1.时间：O（LOGN）；空间：O（1）
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        int total = m + n;
        if(total & 0x01) return find_kth(nums1.begin(), m, nums2.begin(), n, total / 2 + 1);/* 注意是+1 */
        else 
            return (find_kth(nums1.begin(), m, nums2.begin(), n, total / 2) + 
                    find_kth(nums1.begin(), m, nums2.begin(), n, total / 2 + 1)) / 2;
            
    }
    
    double find_kth(vector<int>::iterator begin1, int m, vector<int>::iterator begin2, int n, int k){
        if(m > n) return find_kth(begin2, n, begin1, m, k);	/* 使得begin1对应的vector比begin2对应的vector元素少 */
        if(m == 0) return *(begin2 + k - 1);		/* 因为上一行，使得此处只需考虑m==0的情况，不可能会出现n == 0的情况，因为始终会保证m <= n的 */
        if(k == 1) return std::min(*begin1, *begin2);
        int ia = std::min(m, k / 2), ib = k - ia;
        if(*(begin1 + ia - 1) < *(begin2 + ib - 1)) return find_kth(begin1 + ia, m - ia, begin2, n, k - ia);
        else if(*(begin1 + ia - 1) > *(begin2 + ib - 1)) return find_kth(begin1, m, begin2 + ib, n - ib, k - ib);
        else 
            return std::min(*(begin1 + ia - 1),*(begin2 + ib - 1));
    }
};